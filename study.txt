1.입력과 출력
Bufferedreader br = new Bufferedreader(new InputStreamReader(System.in)); 선언만
한 줄에 여러개 나오지 않으면 Integer.ParseInt(br.readLine());
BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
bw.append();
bw.flush();
후에는 bw.close();  br.close();
StringTokenizer st = new StringTokenizer(br.readLine());
선언 후에
st.nextToken

ArrayList -> ArrayList<Integer> list = new ArrayList<>();
이것은 배열로 되어있기 때문에 특정 값을 찾는데에는 빠르지만, 데이터의 추가 삭제가 많은 경우 시간이 소요
LinkedList - LinkedList<Integer> list = new LinkedList<>();
노드가 포인터로 연결되어 있기 때문에 추가 삭제는 빠르지만 검색을 위해서는 순회검색을 해야 하므로 시간이 많이 소요

2. 해쉬(Hash) -> arraylist와 linkedlist의 단점을 보완한 것
hash가 내부적으로 사용하는 배열을 Hash Table이라고 한다.
hash table
key-value 에서 key를 테이블에 저장할 때 key값을 Hash Method를 이용해 계산을 수행한 후, 그 결과값을 배열의 인덱스로 사용하여 저장하는 방식이다.
여기서 key값을 계산하는 것이 Hash Method 이다.

3.스택(stack)
LIFO
넣을 땐 stack.push()
뺄땐 stack.pop()
가장 위의 것 stack.peek()
stack.size()
4.큐(queue)
FIFO
넣을 땐 queue.offer(x)
뺄 땐 queue.poll()
제일 앞에 있는 값 확인 queue.peek()
queue.size()
queue.contains(x) x포함? bool
Queue<Integer> queue = new LinkedList<>(); 선언